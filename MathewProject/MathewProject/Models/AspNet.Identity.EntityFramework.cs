

using System;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models
{
	public partial class AspNetUser : IdentityUser
	{
		
	}
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.ModelConfiguration;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models.Mapping
{
    public partial class AspNetUserMap : EntityTypeConfiguration<AspNetUser>
    {
        partial void OtherMap()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties
            this.Property(t => t.Id)
                .IsRequired()
				.HasMaxLength(128)
				.HasColumnName("Id");

			this.Property(t => t.UserName)
                .IsRequired()
                .HasMaxLength(256)
				.HasColumnName("UserName")
				.HasColumnAnnotation("Index", new IndexAnnotation(new IndexAttribute("UserNameIndex") {IsClustered = false, IsUnique = true}));

            // Table & Column Mappings
			//Needn't', it is already in file generated by Mapping.tt
            //this.ToTable("AspNetUsers");

			this.Property(t => t.PasswordHash)
				.HasColumnName("PasswordHash");

			this.Property(t => t.SecurityStamp)
				.HasColumnName("SecurityStamp");

			this.Property(t => t.Email)
				.HasMaxLength(256)
				.HasColumnName("Email");

			this.Property(t => t.EmailConfirmed)
				.IsRequired()
				.HasColumnName("EmailConfirmed");

			this.Property(t => t.PhoneNumber)
				.HasColumnName("PhoneNumber");

			this.Property(t => t.PhoneNumberConfirmed)
				.IsRequired()
				.HasColumnName("PhoneNumberConfirmed");

			this.Property(t => t.TwoFactorEnabled)
				.IsRequired()
				.HasColumnName("TwoFactorEnabled");

			this.Property(t => t.LockoutEndDateUtc)
				.HasColumnName("LockoutEndDateUtc");

			this.Property(t => t.LockoutEnabled)
				.IsRequired()
				.HasColumnName("LockoutEnabled");

			this.Property(t => t.AccessFailedCount)
				.IsRequired()
				.HasColumnName("AccessFailedCount");

			// Relationships
            this.HasMany(t => t.Roles)
                .WithRequired()
                .HasForeignKey(ur => ur.UserId);

			this.HasMany(t => t.Claims)
                .WithRequired()
                .HasForeignKey(uc => uc.UserId);

			this.HasMany(t => t.Logins)
                .WithRequired()
                .HasForeignKey(ul => ul.UserId);

        }
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models.Mapping
{
    public class AspNetUserClaimMap : EntityTypeConfiguration<IdentityUserClaim>
    {
        public AspNetUserClaimMap()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Table & Column Mappings
            this.ToTable("AspNetUserClaims");
            this.Property(t => t.Id).HasColumnName("Id");
            this.Property(t => t.ClaimType).HasColumnName("ClaimType");
            this.Property(t => t.ClaimValue).HasColumnName("ClaimValue");
			this.Property(t => t.UserId)
				.IsRequired()
				.HasMaxLength(128)
				.HasColumnName("UserId");
        }
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models.Mapping
{
    public class AspNetUserLoginMap : EntityTypeConfiguration<IdentityUserLogin>
    {
        public AspNetUserLoginMap()
        {
            // Primary Key
            this.HasKey(t => new { t.LoginProvider, t.ProviderKey, t.UserId });

            // Properties
            this.Property(t => t.UserId)
                .IsRequired()
				.HasMaxLength(128)
                
				.HasColumnName("UserId");

            this.Property(t => t.LoginProvider)
                .IsRequired()
                .HasMaxLength(128)
				.HasColumnName("LoginProvider");

            this.Property(t => t.ProviderKey)
                .IsRequired()
                .HasMaxLength(128)
				.HasColumnName("ProviderKey");

            // Table & Column Mappings
            this.ToTable("AspNetUserLogins");

            
        }
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.ModelConfiguration;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models.Mapping
{
    public class AspNetRoleMap : EntityTypeConfiguration<IdentityRole>
    {
        public AspNetRoleMap()
        {
            // Primary Key
            this.HasKey(t => t.Id);

            // Properties
            this.Property(t => t.Id)
                .IsRequired()
				.HasMaxLength(128)
				.HasColumnName("Id");

            this.Property(t => t.Name)
                .IsRequired()
                .HasMaxLength(256)
				.HasColumnName("Name")
				.HasColumnAnnotation("Index", new IndexAnnotation(new IndexAttribute("RoleNameIndex") {IsClustered = false, IsUnique = true}));

            // Table & Column Mappings
            this.ToTable("AspNetRoles");
			
			this.HasMany(t => t.Users)
                .WithRequired()
                .HasForeignKey(ur => ur.RoleId);
					
        }
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;
using Microsoft.AspNet.Identity.EntityFramework;

namespace MathewProject.Models.Mapping
{
    public class AspNetUserRoleMap : EntityTypeConfiguration<IdentityUserRole>
    {
        public AspNetUserRoleMap()
        {
            // Primary Key
            this.HasKey(t => new { t.UserId, t.RoleId });

            // Table & Column Mappings
            this.ToTable("AspNetUserRoles");
            this.Property(t => t.UserId)
				.IsRequired()
				.HasMaxLength(128)
				.HasColumnName("UserId");
            this.Property(t => t.RoleId)
				.IsRequired()
				.HasMaxLength(128)
				.HasColumnName("RoleId");

         
			
        }
    }
}
<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Microsoft.AspNet.Identity.EntityFramework;
using MathewProject.Models.Mapping;

namespace MathewProject.Models
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        static <#= efHost.EntityContainer.Name #>()
        {
            System.Data.Entity.Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        public <#= efHost.EntityContainer.Name #>()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
        }

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
        switch (set.ElementType.Name)
        {
			case "AspNetUserClaim":
#>
		public DbSet<IdentityUserClaim> <#= set.Name #> { get; set; }
<#
                break;
			case "AspNetUserLogin":
#>
		public DbSet<IdentityUserLogin> <#= set.Name #> { get; set; }
<#
                break;
			case "AspNetRole":
#>
		public DbSet<IdentityRole> <#= set.Name #> { get; set; }
<#
                break;
			case "AspNetUser":
#>
		public DbSet<AspNetUser> <#= set.Name #> { get; set; }
<#
                break;
			case "AspNetUserRole":
                break;
			default:
#>
		public DbSet<<#= set.ElementType.Name #>> <#= set.Name #> { get; set; }
<#
                break;
        }
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>Map());
<#
    }
	const int IDENTITY_LIB_VERSION = 2;
	switch (IDENTITY_LIB_VERSION)
	{
		case 1:
#>
			modelBuilder.Configurations.Add(new IdentityUserMap());
<#
	        break;
		case 2:
	        break;
		default:
			throw new NotImplementedException();
	}
#>
			modelBuilder.Configurations.Add(new AspNetUserRoleMap());
        }
    }
}
<#
// Simplifying assumptions based on reverse engineer rules
//  - No complex types
//  - One entity container
//  - No inheritance
//  - Always have two navigation properties
//  - All associations expose FKs (except many:many)
#>
<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);

    if (!((efHost.EntityType.Name == "AspNetUserRole") || (efHost.EntityType.Name == "AspNetUserClaim") || (efHost.EntityType.Name == "AspNetUserLogin") || (efHost.EntityType.Name == "AspNetRole")))
    {        
        
	if (efHost.EntityFrameworkVersion >= new Version(4, 4))
	{
#>
using System.ComponentModel.DataAnnotations.Schema;
<#
	}
	else
	{
#>
using System.ComponentModel.DataAnnotations;
<#
	}
#>
using System.Data.Entity.ModelConfiguration;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityType.Name #>Map : EntityTypeConfiguration<<#= efHost.EntityType.Name #>>
    {
        public <#= efHost.EntityType.Name #>Map()
        {
            // Primary Key
<#
if (efHost.EntityType.Name != "AspNetUser")
{
    if (efHost.EntityType.KeyMembers.Count() == 1)
    {
#>
            this.HasKey(t => t.<#= efHost.EntityType.KeyMembers.Single().Name #>);
<#
    }
    else
    {
#>
            this.HasKey(t => new { <#= string.Join(", ", efHost.EntityType.KeyMembers.Select(m => "t." + m.Name)) #> });
<#
    }
}
#>

            // Properties
<#
    foreach (var prop in efHost.EntityType.Properties)
    {
		if (efHost.EntityType.Name == "AspNetUser")
		{
			if (((prop.Name == "Id") || (prop.Name == "UserName") || (prop.Name == "PasswordHash") || (prop.Name == "SecurityStamp") || (prop.Name == "Email") || (prop.Name == "EmailConfirmed") || (prop.Name == "PhoneNumber") || (prop.Name == "PhoneNumberConfirmed") || (prop.Name == "TwoFactorEnabled") || (prop.Name == "LockoutEndDateUtc") || (prop.Name == "LockoutEnabled") || (prop.Name == "AccessFailedCount"))) continue;
		}
        var type = (PrimitiveType)prop.TypeUsage.EdmType;
        var isKey = efHost.EntityType.KeyMembers.Contains(prop);
        var storeProp = efHost.PropertyToColumnMappings[prop];
        var sgpFacet = storeProp.TypeUsage.Facets.SingleOrDefault(f => f.Name == "StoreGeneratedPattern");
        var storeGeneratedPattern = sgpFacet == null
            ? StoreGeneratedPattern.None
            : (StoreGeneratedPattern)sgpFacet.Value;
            
        var configLines = new List<string>();
             
        if (type.ClrEquivalentType == typeof(int)
            || type.ClrEquivalentType == typeof(decimal)
            || type.ClrEquivalentType == typeof(short)
            || type.ClrEquivalentType == typeof(long))
        {
            if (isKey && storeGeneratedPattern != StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)");
            }
            else if ((!isKey || efHost.EntityType.KeyMembers.Count > 1) && storeGeneratedPattern == StoreGeneratedPattern.Identity)
            {
                configLines.Add(".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)");
            }
        }
                    
        if (type.ClrEquivalentType == typeof(string)
            || type.ClrEquivalentType == typeof(byte[]))
        {
            if (!prop.Nullable)
            {
                configLines.Add(".IsRequired()");
            }
                
            var unicodeFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f => f.Name == "IsUnicode");
            if(unicodeFacet != null && !(bool)unicodeFacet.Value)
            {
                configLines.Add(".IsUnicode(false)");
            }
                
            var fixedLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f => f.Name == "FixedLength");
            if (fixedLengthFacet != null && (bool)fixedLengthFacet.Value)
            {
                configLines.Add(".IsFixedLength()");
            }
                
            var maxLengthFacet = (Facet)prop.TypeUsage.Facets.SingleOrDefault(f => f.Name == "MaxLength");
            if (maxLengthFacet != null && !maxLengthFacet.IsUnbounded)
            {
                configLines.Add(string.Format(".HasMaxLength({0})", maxLengthFacet.Value));

                if (storeGeneratedPattern == StoreGeneratedPattern.Computed
                    && type.ClrEquivalentType == typeof(byte[])
                    && (int)maxLengthFacet.Value == 8)
                {
                    configLines.Add(".IsRowVersion()");
                }
            }
        }
            
        if(configLines.Any())
        {
#>
            this.Property(t => t.<#= prop.Name #>)
                <#= string.Join("\r\n                ", configLines) #>;

<#
        }
    }

    var tableSet = efHost.TableSet;
    var tableName = (string)tableSet.MetadataProperties["Table"].Value
        ?? tableSet.Name;
    var schemaName = (string)tableSet.MetadataProperties["Schema"].Value;
#>
            // Table & Column Mappings
<#
    if (schemaName == "dbo" || string.IsNullOrWhiteSpace(schemaName))
    {
#>
            this.ToTable("<#= tableName #>");
<#
    }
    else
    {
#>
            this.ToTable("<#= tableName #>", "<#= schemaName #>");
<#
    }

    foreach (var property in efHost.EntityType.Properties)
    {
		if (efHost.EntityType.Name == "AspNetUser")
		{
			if (((property.Name == "Id") || (property.Name == "UserName") || (property.Name == "PasswordHash") || (property.Name == "SecurityStamp") || (property.Name == "Email") || (property.Name == "EmailConfirmed") || (property.Name == "PhoneNumber") || (property.Name == "PhoneNumberConfirmed") || (property.Name == "TwoFactorEnabled") || (property.Name == "LockoutEndDateUtc") || (property.Name == "LockoutEnabled") || (property.Name == "AccessFailedCount"))) continue;
		}
#>
            this.Property(t => t.<#= property.Name #>).HasColumnName("<#= efHost.PropertyToColumnMappings[property].Name #>");
<#
    }
        
    // Find m:m relationshipsto configure 
    var manyManyRelationships = efHost.EntityType.NavigationProperties
        .Where(np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            && np.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many
            && np.RelationshipType.RelationshipEndMembers.First() == np.FromEndMember); // <- ensures we only configure from one end
        
    // Find FK relationships that this entity is the dependent of
    var fkRelationships = efHost.EntityType.NavigationProperties
        .Where(np => np.DeclaringType == efHost.EntityType
            && ((AssociationType)np.RelationshipType).IsForeignKey
            && ((AssociationType)np.RelationshipType).ReferentialConstraints.Single().ToRole == np.FromEndMember);
        
    if(manyManyRelationships.Any() || fkRelationships.Any())
    {
#>

            // Relationships
<#
        foreach (var navProperty in manyManyRelationships)
        {
			if (efHost.EntityType.Name == "AspNetUser")
			{
				if (((code.Escape(navProperty) == "Roles") || (code.Escape(navProperty) == "Claims") || (code.Escape(navProperty) == "Logins"))) continue;
			}
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n => n.RelationshipType == navProperty.RelationshipType && n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
            var mapping = efHost.ManyToManyMappings[association];
            var item1 = mapping.Item1;
            var mappingTableName = (string)mapping.Item1.MetadataProperties["Table"].Value
                ?? item1.Name;
            var mappingSchemaName = (string)item1.MetadataProperties["Schema"].Value;

            // Need to ensure that FKs are decalred in the same order as the PK properties on each principal type
            var leftType = (EntityType)navProperty.DeclaringType;
            var leftKeyMappings = mapping.Item2[navProperty.FromEndMember];
            var leftColumns = string.Join(", ", leftType.KeyMembers.Select(m => "\"" + leftKeyMappings[m] + "\""));
            var rightType = (EntityType)otherNavProperty.DeclaringType;
            var rightKeyMappings = mapping.Item2[otherNavProperty.FromEndMember];
            var rightColumns = string.Join(", ", rightType.KeyMembers.Select(m => "\"" + rightKeyMappings[m] + "\""));
#>
            this.HasMany(t => t.<#= code.Escape(navProperty) #>)
                .WithMany(t => t.<#= code.Escape(otherNavProperty) #>)
                .Map(m =>
                    {
<#
            if (mappingSchemaName == "dbo" || string.IsNullOrWhiteSpace(mappingSchemaName))
            {
#>
                        m.ToTable("<#= mappingTableName #>");
<#
            }
            else
            {
#>
                        m.ToTable("<#= mappingTableName #>", "<#= mappingSchemaName #>");
<#
            }
#>
                        m.MapLeftKey(<#= leftColumns #>);
                        m.MapRightKey(<#= rightColumns #>);
                    });

<#
        }
            
        foreach (var navProperty in fkRelationships)
        {
			if (efHost.EntityType.Name == "AspNetUser")
			{
				if (((code.Escape(navProperty) == "Roles") || (code.Escape(navProperty) == "Claims") || (code.Escape(navProperty) == "Logins"))) continue;
			}
            var otherNavProperty = navProperty.ToEndMember.GetEntityType().NavigationProperties.Where(n => n.RelationshipType == navProperty.RelationshipType && n != navProperty).Single();
            var association = (AssociationType)navProperty.RelationshipType;
                
            if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One)
            {
#>
            this.HasRequired(t => t.<#= code.Escape(navProperty) #>)
<#
            }
            else
            {
#>
            this.HasOptional(t => t.<#= code.Escape(navProperty) #>)
<#
            }
                
            if(navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {
#>
                .WithMany(t => t.<#= code.Escape(otherNavProperty) #>)
<#
                if(association.ReferentialConstraints.Single().ToProperties.Count == 1)
                {
#>
                .HasForeignKey(d => d.<#= association.ReferentialConstraints.Single().ToProperties.Single().Name #>);
<#
                }
                else
                {
#>
                .HasForeignKey(d => new { <#= string.Join(", ", association.ReferentialConstraints.Single().ToProperties.Select(p => "d." + p.Name)) #> });
<#
                }
            }
            else
            {
                // NOTE: We can assume that this is a required:optional relationship 
                //       as EDMGen will never create an optional:optional relationship
                // 		 because everything is one:many except PK-PK relationships which must be required
#>
                .WithOptional(t => t.<#= code.Escape(otherNavProperty) #>);
<#	
                }
            }
#>

<#
        }
#>
			OtherMap();
        }

		partial void OtherMap();
    }
}
<#
}
#>
<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ output extension=".cs" #>
<#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);

    if (!((efHost.EntityType.Name == "AspNetUserRole") || (efHost.EntityType.Name == "AspNetUserClaim") || (efHost.EntityType.Name == "AspNetUserLogin") || (efHost.EntityType.Name == "AspNetRole")))
    {
		var isUserTable = efHost.EntityType.Name == "AspNetUser";
#>
using System;
using System.Collections.Generic;
using Microsoft.AspNet.Identity.EntityFramework;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
            var propName = code.Escape(navProperty);
            var propType = code.Escape(navProperty.ToEndMember.GetEntityType());
            if (isUserTable)
            {
                switch (propName)
                {
                    case "AspNetUserClaims":
                        propName = "Claims";
                        propType = "IdentityUserClaim";
                        continue;
                    case "AspNetUserRoles":
						propType = "IdentityUserRole";
						continue;
					case "AspNetRoles":
                        propName = "Roles";
						propType = "IdentityRole";
                        continue;
                    case "AspNetUserLogins":
                        propName = "Logins";
						propType = "IdentityUserLogin";
                        continue;
                }

            }
#>
            this.<#= propName #> = new List<<#= propType #>>();
<#
        }
#>
        }
<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
		var propName = code.Escape(property);
        if (isUserTable)
        {
            if (propName == "Id" || propName == "UserName" 
				|| propName == "PasswordHash"
				|| propName == "SecurityStamp"
				|| propName == "Email"
				|| propName == "EmailConfirmed"
				|| propName == "PhoneNumber"
				|| propName == "PhoneNumberConfirmed"
				|| propName == "TwoFactorEnabled"
				|| propName == "LockoutEndDateUtc"
				|| propName == "LockoutEnabled"
				|| propName == "AccessFailedCount"
				)
            {
                continue;
            }
        }
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= propName #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
		if (isUserTable)
        {
            var propName = code.Escape(navProperty);
            if (propName == "AspNetUserClaims" || propName == "AspNetUserLogins" 
				|| propName == "AspNetUserRoles"
				|| propName == "AspNetRoles")
            {
                continue;
            }
        }
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
		public void Copy(<#= efHost.EntityType.Name #> source)
		{
<#

	foreach (var property in efHost.EntityType.Properties)
    {
		var propName = code.Escape(property);
		
#>
			<#= propName #> = source.<#= propName #>;
<#		
	}
#>
		}
    }
}
<#
    }
#>
